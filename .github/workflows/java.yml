# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarQube analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# (this feature is available starting from SonarQube 9.7, Developer Edition and above)

# 1. Make sure you add a valid GitHub configuration to your SonarQube (Administration > DevOps platforms > GitHub)

# 2. Import your project on SonarQube
#     * Add your repository as a new project by clicking "Create project" from your homepage.
#
# 3. Select GitHub Actions as your CI and follow the tutorial
#     * a. Generate a new token and add it to your GitHub repository's secrets using the name SONAR_TOKEN
#          (On SonarQube, click on your avatar on top-right > My account > Security or ask your administrator)
#
#     * b. Copy/paste your SonarQube host URL to your GitHub repository's secrets using the name SONAR_HOST_URL
#
#     * c. Copy/paste the project Key into the args parameter below
#          (You'll find this information in SonarQube by following the tutorial or by clicking on Project Information at the top-right of your project's homepage)

# Feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: Java Check, Build and Push

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - feature-*
    paths:
      - "java/**"
  pull_request:
    types: [opened]
    branches: [ "master" ]
    paths:
      - "/**"
    


permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  sonarqube:
    name: SonarQube Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: java
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_JAVA }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cr0nems_simple-java-maven-app_java
        
  publish:
    needs: sonarqube
    name: Build & Publish JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: JIB container build and publish
        uses: cr0nems/jib-container-publish.yml@main
        with:
          PASSWORD: ${{ secrets.TOKEN }}
          working-dir: java
  createCluster: 
    needs: publish
    name: build up k3d simu cluster
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: AbsaOSS/k3d-action
        uses: AbsaOSS/k3d-action@v2.4.0
        with:
          cluster-name: mock-up
          args: >-
            --image docker.io/rancher/k3s:v1.26.7-k3s1
            --agents 2
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
            -p "8083:80@agent:0:direct"
      - name: Cluster info
        run: | 
          kubectl cluster-info --context k3d-mock-up
      - name: Nodes
        run: | 
          docker ps -a
          kubectl config use-context k3d-mock-up
          kubectl get nodes -o wide
      - name: Network
        run: docker network inspect k3d-mock-up
 
            
        



          
          

